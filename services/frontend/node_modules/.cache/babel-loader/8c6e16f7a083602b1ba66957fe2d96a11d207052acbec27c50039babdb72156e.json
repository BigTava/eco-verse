{"ast":null,"code":"import g, { createContext as fe, createRef as ge, useCallback as X, useContext as j, useEffect as I, useMemo as R, useReducer as Te, useRef as K, useState as ce } from \"react\";\nimport { match as w } from '../../utils/match.js';\nimport { forwardRefWithAs as v, render as O, Features as V } from '../../utils/render.js';\nimport { useSyncRefs as b } from '../../hooks/use-sync-refs.js';\nimport { Keys as De } from '../keyboard.js';\nimport { isDisabledReactIssue7711 as me } from '../../utils/bugs.js';\nimport { useId as h } from '../../hooks/use-id.js';\nimport { FocusTrap as L } from '../../components/focus-trap/focus-trap.js';\nimport { Portal as B } from '../../components/portal/portal.js';\nimport { ForcePortalRoot as G } from '../../internal/portal-force-root.js';\nimport { Description as Pe, useDescriptions as ye } from '../description/description.js';\nimport { useOpenClosed as Ee, State as _ } from '../../internal/open-closed.js';\nimport { useServerHandoffComplete as Ae } from '../../hooks/use-server-handoff-complete.js';\nimport { StackProvider as Re, StackMessage as q } from '../../internal/stack-context.js';\nimport { useOutsideClick as Ce } from '../../hooks/use-outside-click.js';\nimport { useOwnerDocument as ve } from '../../hooks/use-owner.js';\nimport { useEventListener as Oe } from '../../hooks/use-event-listener.js';\nimport { Hidden as be, Features as he } from '../../internal/hidden.js';\nimport { useEvent as C } from '../../hooks/use-event.js';\nimport { useDocumentOverflowLockedEffect as Le } from '../../hooks/document-overflow/use-document-overflow.js';\nimport { useInert as z } from '../../hooks/use-inert.js';\nvar Se = (o => (o[o.Open = 0] = \"Open\", o[o.Closed = 1] = \"Closed\", o))(Se || {}),\n  Fe = (e => (e[e.SetTitleId = 0] = \"SetTitleId\", e))(Fe || {});\nlet ke = {\n    [0](t, e) {\n      return t.titleId === e.id ? t : {\n        ...t,\n        titleId: e.id\n      };\n    }\n  },\n  M = fe(null);\nM.displayName = \"DialogContext\";\nfunction S(t) {\n  let e = j(M);\n  if (e === null) {\n    let o = new Error(`<${t} /> is missing a parent <Dialog /> component.`);\n    throw Error.captureStackTrace && Error.captureStackTrace(o, S), o;\n  }\n  return e;\n}\nfunction xe(t, e) {\n  let o = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : () => [document.body];\n  Le(t, e, s => {\n    var n;\n    return {\n      containers: [...((n = s.containers) != null ? n : []), o]\n    };\n  });\n}\nfunction _e(t, e) {\n  return w(e.type, ke, t, e);\n}\nlet Me = \"div\",\n  He = V.RenderStrategy | V.Static;\nfunction Ie(t, e) {\n  let o = h(),\n    {\n      id: s = `headlessui-dialog-${o}`,\n      open: n,\n      onClose: l,\n      initialFocus: d,\n      __demoMode: c = !1,\n      ...D\n    } = t,\n    [P, F] = ce(0),\n    i = Ee();\n  n === void 0 && i !== null && (n = (i & _.Open) === _.Open);\n  let m = K(null),\n    Q = b(m, e),\n    y = K(null),\n    p = ve(m),\n    U = t.hasOwnProperty(\"open\") || i !== null,\n    N = t.hasOwnProperty(\"onClose\");\n  if (!U && !N) throw new Error(\"You have to provide an `open` and an `onClose` prop to the `Dialog` component.\");\n  if (!U) throw new Error(\"You provided an `onClose` prop to the `Dialog`, but forgot an `open` prop.\");\n  if (!N) throw new Error(\"You provided an `open` prop to the `Dialog`, but forgot an `onClose` prop.\");\n  if (typeof n != \"boolean\") throw new Error(`You provided an \\`open\\` prop to the \\`Dialog\\`, but the value is not a boolean. Received: ${n}`);\n  if (typeof l != \"function\") throw new Error(`You provided an \\`onClose\\` prop to the \\`Dialog\\`, but the value is not a function. Received: ${l}`);\n  let u = n ? 0 : 1,\n    [E, Z] = Te(_e, {\n      titleId: null,\n      descriptionId: null,\n      panelRef: ge()\n    }),\n    A = C(() => l(!1)),\n    Y = C(r => Z({\n      type: 0,\n      id: r\n    })),\n    k = Ae() ? c ? !1 : u === 0 : !1,\n    x = P > 1,\n    $ = j(M) !== null,\n    ee = x ? \"parent\" : \"leaf\",\n    W = i !== null ? (i & _.Closing) === _.Closing : !1,\n    te = (() => $ || W ? !1 : k)(),\n    oe = X(() => {\n      var r, f;\n      return (f = Array.from((r = p == null ? void 0 : p.querySelectorAll(\"body > *\")) != null ? r : []).find(a => a.id === \"headlessui-portal-root\" ? !1 : a.contains(y.current) && a instanceof HTMLElement)) != null ? f : null;\n    }, [y]);\n  z(oe, te);\n  let re = (() => x ? !0 : k)(),\n    ne = X(() => {\n      var r, f;\n      return (f = Array.from((r = p == null ? void 0 : p.querySelectorAll(\"[data-headlessui-portal]\")) != null ? r : []).find(a => a.contains(y.current) && a instanceof HTMLElement)) != null ? f : null;\n    }, [y]);\n  z(ne, re);\n  let H = C(() => {\n      var f, a;\n      return [...Array.from((f = p == null ? void 0 : p.querySelectorAll(\"html > *, body > *, [data-headlessui-portal]\")) != null ? f : []).filter(T => !(T === document.body || T === document.head || !(T instanceof HTMLElement) || T.contains(y.current) || E.panelRef.current && T.contains(E.panelRef.current))), (a = E.panelRef.current) != null ? a : m.current];\n    }),\n    le = (() => !(!k || x))();\n  Ce(() => H(), A, le);\n  let ae = (() => !(x || u !== 0))();\n  Oe(p == null ? void 0 : p.defaultView, \"keydown\", r => {\n    ae && (r.defaultPrevented || r.key === De.Escape && (r.preventDefault(), r.stopPropagation(), A()));\n  });\n  let ie = (() => !(W || u !== 0 || $))();\n  xe(p, ie, H), I(() => {\n    if (u !== 0 || !m.current) return;\n    let r = new ResizeObserver(f => {\n      for (let a of f) {\n        let T = a.target.getBoundingClientRect();\n        T.x === 0 && T.y === 0 && T.width === 0 && T.height === 0 && A();\n      }\n    });\n    return r.observe(m.current), () => r.disconnect();\n  }, [u, m, A]);\n  let [se, pe] = ye(),\n    de = R(() => [{\n      dialogState: u,\n      close: A,\n      setTitleId: Y\n    }, E], [u, E, A, Y]),\n    J = R(() => ({\n      open: u === 0\n    }), [u]),\n    ue = {\n      ref: Q,\n      id: s,\n      role: \"dialog\",\n      \"aria-modal\": u === 0 ? !0 : void 0,\n      \"aria-labelledby\": E.titleId,\n      \"aria-describedby\": se\n    };\n  return g.createElement(Re, {\n    type: \"Dialog\",\n    enabled: u === 0,\n    element: m,\n    onUpdate: C((r, f) => {\n      f === \"Dialog\" && w(r, {\n        [q.Add]: () => F(a => a + 1),\n        [q.Remove]: () => F(a => a - 1)\n      });\n    })\n  }, g.createElement(G, {\n    force: !0\n  }, g.createElement(B, null, g.createElement(M.Provider, {\n    value: de\n  }, g.createElement(B.Group, {\n    target: m\n  }, g.createElement(G, {\n    force: !1\n  }, g.createElement(pe, {\n    slot: J,\n    name: \"Dialog.Description\"\n  }, g.createElement(L, {\n    initialFocus: d,\n    containers: H,\n    features: k ? w(ee, {\n      parent: L.features.RestoreFocus,\n      leaf: L.features.All & ~L.features.FocusLock\n    }) : L.features.None\n  }, O({\n    ourProps: ue,\n    theirProps: D,\n    slot: J,\n    defaultTag: Me,\n    features: He,\n    visible: u === 0,\n    name: \"Dialog\"\n  })))))))), g.createElement(be, {\n    features: he.Hidden,\n    ref: y\n  }));\n}\nlet we = \"div\";\nfunction Be(t, e) {\n  let o = h(),\n    {\n      id: s = `headlessui-dialog-overlay-${o}`,\n      ...n\n    } = t,\n    [{\n      dialogState: l,\n      close: d\n    }] = S(\"Dialog.Overlay\"),\n    c = b(e),\n    D = C(i => {\n      if (i.target === i.currentTarget) {\n        if (me(i.currentTarget)) return i.preventDefault();\n        i.preventDefault(), i.stopPropagation(), d();\n      }\n    }),\n    P = R(() => ({\n      open: l === 0\n    }), [l]);\n  return O({\n    ourProps: {\n      ref: c,\n      id: s,\n      \"aria-hidden\": !0,\n      onClick: D\n    },\n    theirProps: n,\n    slot: P,\n    defaultTag: we,\n    name: \"Dialog.Overlay\"\n  });\n}\nlet Ge = \"div\";\nfunction Ue(t, e) {\n  let o = h(),\n    {\n      id: s = `headlessui-dialog-backdrop-${o}`,\n      ...n\n    } = t,\n    [{\n      dialogState: l\n    }, d] = S(\"Dialog.Backdrop\"),\n    c = b(e);\n  I(() => {\n    if (d.panelRef.current === null) throw new Error(\"A <Dialog.Backdrop /> component is being used, but a <Dialog.Panel /> component is missing.\");\n  }, [d.panelRef]);\n  let D = R(() => ({\n    open: l === 0\n  }), [l]);\n  return g.createElement(G, {\n    force: !0\n  }, g.createElement(B, null, O({\n    ourProps: {\n      ref: c,\n      id: s,\n      \"aria-hidden\": !0\n    },\n    theirProps: n,\n    slot: D,\n    defaultTag: Ge,\n    name: \"Dialog.Backdrop\"\n  })));\n}\nlet Ne = \"div\";\nfunction Ye(t, e) {\n  let o = h(),\n    {\n      id: s = `headlessui-dialog-panel-${o}`,\n      ...n\n    } = t,\n    [{\n      dialogState: l\n    }, d] = S(\"Dialog.Panel\"),\n    c = b(e, d.panelRef),\n    D = R(() => ({\n      open: l === 0\n    }), [l]),\n    P = C(i => {\n      i.stopPropagation();\n    });\n  return O({\n    ourProps: {\n      ref: c,\n      id: s,\n      onClick: P\n    },\n    theirProps: n,\n    slot: D,\n    defaultTag: Ne,\n    name: \"Dialog.Panel\"\n  });\n}\nlet $e = \"h2\";\nfunction We(t, e) {\n  let o = h(),\n    {\n      id: s = `headlessui-dialog-title-${o}`,\n      ...n\n    } = t,\n    [{\n      dialogState: l,\n      setTitleId: d\n    }] = S(\"Dialog.Title\"),\n    c = b(e);\n  I(() => (d(s), () => d(null)), [s, d]);\n  let D = R(() => ({\n    open: l === 0\n  }), [l]);\n  return O({\n    ourProps: {\n      ref: c,\n      id: s\n    },\n    theirProps: n,\n    slot: D,\n    defaultTag: $e,\n    name: \"Dialog.Title\"\n  });\n}\nlet Je = v(Ie),\n  Xe = v(Ue),\n  je = v(Ye),\n  Ke = v(Be),\n  Ve = v(We),\n  St = Object.assign(Je, {\n    Backdrop: Xe,\n    Panel: je,\n    Overlay: Ke,\n    Title: Ve,\n    Description: Pe\n  });\nexport { St as Dialog };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}