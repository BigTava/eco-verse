{"ast":null,"code":"import m from \"pino\";\nimport f from \"@walletconnect/sign-client\";\nimport { getSdkError as g, isValidArray as P } from \"@walletconnect/utils\";\nimport { getDefaultLoggerOptions as w } from \"@walletconnect/logger\";\nimport { JsonRpcProvider as a } from \"@walletconnect/jsonrpc-provider\";\nimport c, { HttpConnection as C } from \"@walletconnect/jsonrpc-http-connection\";\nimport I from \"events\";\nfunction y(i) {\n  var t;\n  const e = (t = i[Object.keys(i)[0]]) == null ? void 0 : t.chains[0];\n  return [e.split(\":\")[0], e.split(\":\")[1]];\n}\nfunction r(i, t) {\n  let e;\n  return t.rpcMap && (e = t.rpcMap[O([i])]), e;\n}\nfunction O(i) {\n  return Number(i[0].split(\":\")[1]);\n}\nclass E {\n  constructor(t) {\n    this.name = \"eip155\", this.namespace = t.namespace, this.client = t.client, this.events = t.events, this.httpProviders = this.createHttpProviders(), this.chainId = this.getDefaultChainId();\n  }\n  async request(t) {\n    var e;\n    switch (t.request.method) {\n      case \"eth_requestAccounts\":\n        return this.getAccounts();\n      case \"eth_accounts\":\n        return this.getAccounts();\n      case \"wallet_switchEthereumChain\":\n        {\n          const s = t.request.params ? (e = t.request.params[0]) == null ? void 0 : e.chainId : \"0x0\";\n          return this.setDefaultChain(parseInt(s, 16).toString()), null;\n        }\n      case \"eth_chainId\":\n        return this.getDefaultChainId();\n    }\n    return this.namespace.methods.includes(t.request.method) ? await this.client.request(t) : this.getHttpProvider().request(t.request);\n  }\n  updateNamespace(t) {\n    this.namespace = Object.assign(this.namespace, t);\n  }\n  setDefaultChain(t, e) {\n    if (this.chainId = parseInt(t), !this.httpProviders[t]) {\n      const s = e || r(`${this.name}:${t}`, this.namespace);\n      if (!s) throw new Error(`No RPC url provided for chainId: ${t}`);\n      this.setHttpProvider(t, s);\n    }\n    this.events.emit(\"chainChanged\", this.chainId);\n  }\n  requestAccounts() {\n    return this.getAccounts();\n  }\n  createHttpProvider(t, e) {\n    const s = e || r(t, this.namespace);\n    return typeof s > \"u\" ? void 0 : new a(new C(s));\n  }\n  setHttpProvider(t, e) {\n    const s = this.createHttpProvider(t, e);\n    s && (this.httpProviders[t] = s);\n  }\n  createHttpProviders() {\n    const t = {};\n    return this.namespace.chains.forEach(e => {\n      t[e] = this.createHttpProvider(e);\n    }), t;\n  }\n  getAccounts() {\n    const t = this.namespace.accounts;\n    return t ? t.filter(e => e.split(\":\")[1] === this.chainId.toString()).map(e => e.split(\":\")[2]) || [] : [];\n  }\n  getDefaultChainId() {\n    if (this.chainId) return this.chainId;\n    const t = this.namespace.chains[0];\n    if (!t) throw new Error(\"ChainId not found\");\n    return parseInt(t.split(\":\")[1]);\n  }\n  getHttpProvider() {\n    const t = `${this.name}:${this.chainId}`,\n      e = this.httpProviders[t];\n    if (typeof e > \"u\") throw new Error(`JSON-RPC provider for ${t} not found`);\n    return e;\n  }\n}\nclass q {\n  constructor(t) {\n    this.name = \"solana\", this.namespace = t.namespace, this.events = t.events, this.client = t.client, this.chainId = this.getDefaultChainId(), this.httpProviders = this.createHttpProviders();\n  }\n  updateNamespace(t) {\n    this.namespace = Object.assign(this.namespace, t);\n  }\n  requestAccounts() {\n    return this.getAccounts();\n  }\n  getAccounts() {\n    const t = this.namespace.accounts;\n    return t ? t.filter(e => e.split(\":\")[1] === this.chainId.toString()).map(e => e.split(\":\")[2]) || [] : [];\n  }\n  createHttpProviders() {\n    const t = {};\n    return this.namespace.chains.forEach(e => {\n      t[e] = this.createHttpProvider(e);\n    }), t;\n  }\n  getDefaultChainId() {\n    if (this.chainId) return this.chainId;\n    const t = this.namespace.chains[0];\n    if (!t) throw new Error(\"ChainId not found\");\n    return t.split(\":\")[1];\n  }\n  request(t) {\n    return this.namespace.methods.includes(t.request.method) ? this.client.request(t) : this.getHttpProvider().request(t.request);\n  }\n  getHttpProvider() {\n    const t = `${this.name}:${this.chainId}`,\n      e = this.httpProviders[t];\n    if (typeof e > \"u\") throw new Error(`JSON-RPC provider for ${t} not found`);\n    return e;\n  }\n  setDefaultChain(t, e) {\n    if (this.chainId = t, !this.httpProviders[t]) {\n      const s = e || r(`${this.name}:${t}`, this.namespace);\n      if (!s) throw new Error(`No RPC url provided for chainId: ${t}`);\n      this.setHttpProvider(t, s);\n    }\n    this.events.emit(\"chainChanged\", this.chainId);\n  }\n  setHttpProvider(t, e) {\n    const s = this.createHttpProvider(t, e);\n    s && (this.httpProviders[t] = s);\n  }\n  createHttpProvider(t, e) {\n    const s = e || r(t, this.namespace);\n    return typeof s > \"u\" ? void 0 : new a(new c(s));\n  }\n}\nclass H {\n  constructor(t) {\n    this.name = \"cosmos\", this.namespace = t.namespace, this.events = t.events, this.client = t.client, this.chainId = this.getDefaultChainId(), this.httpProviders = this.createHttpProviders();\n  }\n  updateNamespace(t) {\n    this.namespace = Object.assign(this.namespace, t);\n  }\n  requestAccounts() {\n    return this.getAccounts();\n  }\n  getAccounts() {\n    const t = this.namespace.accounts;\n    return t ? t.filter(e => e.split(\":\")[1] === this.chainId.toString()).map(e => e.split(\":\")[2]) || [] : [];\n  }\n  createHttpProviders() {\n    const t = {};\n    return this.namespace.chains.forEach(e => {\n      t[e] = this.createHttpProvider(e);\n    }), t;\n  }\n  getDefaultChainId() {\n    if (this.chainId) return this.chainId;\n    const t = this.namespace.chains[0];\n    if (!t) throw new Error(\"ChainId not found\");\n    return t.split(\":\")[1];\n  }\n  request(t) {\n    return this.namespace.methods.includes(t.request.method) ? this.client.request(t) : this.getHttpProvider().request(t.request);\n  }\n  getHttpProvider() {\n    const t = `${this.name}:${this.chainId}`,\n      e = this.httpProviders[t];\n    if (typeof e > \"u\") throw new Error(`JSON-RPC provider for ${t} not found`);\n    return e;\n  }\n  setDefaultChain(t, e) {\n    if (this.chainId = t, !this.httpProviders[t]) {\n      const s = e || r(`${this.name}:${t}`, this.namespace);\n      if (!s) throw new Error(`No RPC url provided for chainId: ${t}`);\n      this.setHttpProvider(t, s);\n    }\n    this.events.emit(\"chainChanged\", this.chainId);\n  }\n  setHttpProvider(t, e) {\n    const s = this.createHttpProvider(t, e);\n    s && (this.httpProviders[t] = s);\n  }\n  createHttpProvider(t, e) {\n    const s = e || r(t, this.namespace);\n    return typeof s > \"u\" ? void 0 : new a(new c(s));\n  }\n}\nclass $ {\n  constructor(t) {\n    this.name = \"cip34\", this.namespace = t.namespace, this.events = t.events, this.client = t.client, this.chainId = this.getDefaultChainId(), this.httpProviders = this.createHttpProviders();\n  }\n  updateNamespace(t) {\n    this.namespace = Object.assign(this.namespace, t);\n  }\n  requestAccounts() {\n    return this.getAccounts();\n  }\n  getAccounts() {\n    const t = this.namespace.accounts;\n    return t ? t.filter(e => e.split(\":\")[1] === this.chainId.toString()).map(e => e.split(\":\")[2]) || [] : [];\n  }\n  createHttpProviders() {\n    const t = {};\n    return this.namespace.chains.forEach(e => {\n      t[e] = this.createHttpProvider(e);\n    }), t;\n  }\n  getDefaultChainId() {\n    if (this.chainId) return this.chainId;\n    const t = this.namespace.chains[0];\n    if (!t) throw new Error(\"ChainId not found\");\n    return t.split(\":\")[1];\n  }\n  request(t) {\n    return this.namespace.methods.includes(t.request.method) ? this.client.request(t) : this.getHttpProvider().request(t.request);\n  }\n  getHttpProvider() {\n    const t = `${this.name}:${this.chainId}`,\n      e = this.httpProviders[t];\n    if (typeof e > \"u\") throw new Error(`JSON-RPC provider for ${t} not found`);\n    return e;\n  }\n  setDefaultChain(t, e) {\n    if (this.chainId = t, !this.httpProviders[t]) {\n      const s = e || r(`${this.name}:${t}`, this.namespace);\n      if (!s) throw new Error(`No RPC url provided for chainId: ${t}`);\n      this.setHttpProvider(t, s);\n    }\n    this.events.emit(\"chainChanged\", this.chainId);\n  }\n  setHttpProvider(t, e) {\n    const s = this.createHttpProvider(t, e);\n    s && (this.httpProviders[t] = s);\n  }\n  createHttpProvider(t, e) {\n    const s = e || r(t, this.namespace);\n    return typeof s > \"u\" ? void 0 : new a(new c(s));\n  }\n}\nconst h = \"error\",\n  b = \"wss://relay.walletconnect.com\",\n  S = \"wc\",\n  A = \"universal_provider\",\n  p = `${S}@${2}:${A}:`;\nvar N = Object.defineProperty,\n  D = Object.defineProperties,\n  j = Object.getOwnPropertyDescriptors,\n  d = Object.getOwnPropertySymbols,\n  k = Object.prototype.hasOwnProperty,\n  R = Object.prototype.propertyIsEnumerable,\n  l = (i, t, e) => t in i ? N(i, t, {\n    enumerable: !0,\n    configurable: !0,\n    writable: !0,\n    value: e\n  }) : i[t] = e,\n  u = (i, t) => {\n    for (var e in t || (t = {})) k.call(t, e) && l(i, e, t[e]);\n    if (d) for (var e of d(t)) R.call(t, e) && l(i, e, t[e]);\n    return i;\n  },\n  _ = (i, t) => D(i, j(t));\nclass o {\n  constructor(t) {\n    this.events = new I(), this.rpcProviders = {}, this.providerOpts = t, this.logger = typeof t?.logger < \"u\" && typeof t?.logger != \"string\" ? t.logger : m(w({\n      level: t?.logger || h\n    }));\n  }\n  static async init(t) {\n    const e = new o(t);\n    return await e.initialize(), e;\n  }\n  async request(t, e) {\n    const [s, n] = this.validateChain(e);\n    if (!this.session) throw new Error(\"Please call connect() before request()\");\n    return await this.getProvider(s).request({\n      request: u({}, t),\n      chainId: `${s}:${n}`,\n      topic: this.session.topic\n    });\n  }\n  sendAsync(t, e, s) {\n    this.request(t, s).then(n => e(null, n)).catch(n => e(n, void 0));\n  }\n  async enable() {\n    if (!this.client) throw new Error(\"Sign Client not initialized\");\n    return this.session || (await this.connect({\n      namespaces: this.namespaces\n    })), await this.requestAccounts();\n  }\n  async disconnect() {\n    var t;\n    if (!this.session) throw new Error(\"Please call connect() before enable()\");\n    await this.client.disconnect({\n      topic: (t = this.session) == null ? void 0 : t.topic,\n      reason: g(\"USER_DISCONNECTED\")\n    }), await this.cleanup();\n  }\n  async connect(t) {\n    if (!this.client) throw new Error(\"Sign Client not initialized\");\n    const {\n      namespaces: e\n    } = t;\n    return this.setNamespaces(e), this.createProviders(), await this.cleanupPendingPairings(), t.skipPairing === !0 ? void 0 : await this.pair(t.pairingTopic);\n  }\n  on(t, e) {\n    this.events.on(t, e);\n  }\n  once(t, e) {\n    this.events.once(t, e);\n  }\n  removeListener(t, e) {\n    this.events.removeListener(t, e);\n  }\n  off(t, e) {\n    this.events.off(t, e);\n  }\n  get isWalletConnect() {\n    return !0;\n  }\n  async pair(t) {\n    const {\n      uri: e,\n      approval: s\n    } = await this.client.connect({\n      pairingTopic: t,\n      requiredNamespaces: this.namespaces\n    });\n    return e && (this.uri = e, this.events.emit(\"display_uri\", e)), this.session = await s(), this.onSessionUpdate(), this.onConnect(), this.session;\n  }\n  setDefaultChain(t, e) {\n    try {\n      const [s, n] = this.validateChain(t);\n      this.getProvider(s).setDefaultChain(n, e);\n    } catch (s) {\n      if (!/Please call connect/.test(s.message)) throw s;\n    }\n  }\n  async cleanupPendingPairings() {\n    let t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.logger.info(\"Cleaning up inactive pairings...\");\n    const e = this.client.pairing.getAll();\n    if (P(e)) {\n      for (const s of e) t.deletePairings ? this.client.core.expirer.set(s.topic, 0) : await this.client.core.relayer.subscriber.unsubscribe(s.topic);\n      this.logger.info(`Inactive pairings cleared: ${e.length}`);\n    }\n  }\n  async checkStorage() {\n    if (this.namespaces = (await this.client.core.storage.getItem(`${p}/namespaces`)) || {}, this.namespaces && this.createProviders(), this.client.session.length) {\n      const t = this.client.session.keys.length - 1;\n      this.session = this.client.session.get(this.client.session.keys[t]), this.onSessionUpdate();\n    }\n  }\n  async initialize() {\n    this.logger.trace(\"Initialized\"), await this.createClient(), this.checkStorage(), this.registerEventListeners();\n  }\n  async createClient() {\n    this.client = this.providerOpts.client || (await f.init({\n      logger: this.providerOpts.logger || h,\n      relayUrl: this.providerOpts.relayUrl || b,\n      projectId: this.providerOpts.projectId,\n      metadata: this.providerOpts.metadata,\n      storageOptions: this.providerOpts.storageOptions,\n      name: this.providerOpts.name\n    })), this.logger.trace(\"SignClient Initialized\");\n  }\n  createProviders() {\n    if (!this.client) throw new Error(\"Sign Client not initialized\");\n    Object.keys(this.namespaces).forEach(t => {\n      switch (t) {\n        case \"eip155\":\n          this.rpcProviders[t] = new E({\n            client: this.client,\n            namespace: this.namespaces[t],\n            events: this.events\n          });\n          break;\n        case \"solana\":\n          this.rpcProviders[t] = new q({\n            client: this.client,\n            namespace: this.namespaces[t],\n            events: this.events\n          });\n          break;\n        case \"cosmos\":\n          this.rpcProviders[t] = new H({\n            client: this.client,\n            namespace: this.namespaces[t],\n            events: this.events\n          });\n          break;\n        case \"polkadot\":\n          break;\n        case \"cip34\":\n          this.rpcProviders[t] = new $({\n            client: this.client,\n            namespace: this.namespaces[t],\n            events: this.events\n          });\n          break;\n      }\n    });\n  }\n  registerEventListeners() {\n    if (typeof this.client > \"u\") throw new Error(\"Sign Client is not initialized\");\n    this.client.on(\"session_ping\", t => {\n      this.events.emit(\"session_ping\", t);\n    }), this.client.on(\"session_event\", t => {\n      const {\n          params: e\n        } = t,\n        {\n          event: s\n        } = e;\n      s.name === \"accountsChanged\" ? this.events.emit(\"accountsChanged\", s.data) : s.name === \"chainChanged\" ? this.onChainChanged(s.data, e.chainId) : this.events.emit(s.name, s.data), this.events.emit(\"session_event\", t);\n    }), this.client.on(\"session_update\", _ref => {\n      let {\n        topic: t,\n        params: e\n      } = _ref;\n      var s;\n      const {\n          namespaces: n\n        } = e,\n        v = (s = this.client) == null ? void 0 : s.session.get(t);\n      this.session = _(u({}, v), {\n        namespaces: n\n      }), this.onSessionUpdate(), this.events.emit(\"session_update\", {\n        topic: t,\n        params: e\n      });\n    }), this.client.on(\"session_delete\", async t => {\n      await this.cleanup(), this.events.emit(\"session_delete\", t);\n    });\n  }\n  getProvider(t) {\n    if (!this.rpcProviders[t]) throw new Error(`Provider not found: ${t}`);\n    return this.rpcProviders[t];\n  }\n  onSessionUpdate() {\n    Object.keys(this.rpcProviders).forEach(t => {\n      var e;\n      this.getProvider(t).updateNamespace((e = this.session) == null ? void 0 : e.namespaces[t]);\n    });\n  }\n  setNamespaces(t) {\n    if (!t || !Object.keys(t).length) throw new Error(\"Namespaces must be not empty\");\n    this.client.core.storage.setItem(`${p}/namespaces`, t), this.namespaces = t;\n  }\n  validateChain(t) {\n    const [e, s] = t?.split(\":\") || [\"\", \"\"];\n    if (e && !Object.keys(this.namespaces).includes(e)) throw new Error(`Namespace '${e}' is not configured. Please call connect() first with namespace config.`);\n    return !e || !s ? y(this.namespaces) : [e, s];\n  }\n  async requestAccounts() {\n    const [t] = this.validateChain();\n    return await this.getProvider(t).requestAccounts();\n  }\n  onChainChanged(t, e) {\n    const [s, n] = this.validateChain(e);\n    this.getProvider(s).setDefaultChain(n), this.events.emit(\"chainChanged\", t);\n  }\n  onConnect() {\n    this.events.emit(\"connect\", {\n      session: this.session\n    });\n  }\n  async cleanup() {\n    this.session = void 0, await this.cleanupPendingPairings({\n      deletePairings: !0\n    });\n  }\n}\nconst U = o;\nexport { U as UniversalProvider, o as default };\n//# sourceMappingURL=index.es.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}