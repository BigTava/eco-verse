{"ast":null,"code":"import { useEffect as d, useRef as s } from \"react\";\nimport { FocusableMode as p, isFocusableElement as C } from '../utils/focus-management.js';\nimport { useDocumentEvent as a } from './use-document-event.js';\nfunction L(m, E) {\n  let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : !0;\n  let i = s(!1);\n  d(() => {\n    requestAnimationFrame(() => {\n      i.current = c;\n    });\n  }, [c]);\n  function f(e, o) {\n    if (!i.current || e.defaultPrevented) return;\n    let l = function r(t) {\n        return typeof t == \"function\" ? r(t()) : Array.isArray(t) || t instanceof Set ? t : [t];\n      }(m),\n      n = o(e);\n    if (n !== null && n.getRootNode().contains(n)) {\n      for (let r of l) {\n        if (r === null) continue;\n        let t = r instanceof HTMLElement ? r : r.current;\n        if (t != null && t.contains(n) || e.composed && e.composedPath().includes(t)) return;\n      }\n      return !C(n, p.Loose) && n.tabIndex !== -1 && e.preventDefault(), E(e, n);\n    }\n  }\n  let u = s(null);\n  a(\"mousedown\", e => {\n    var o, l;\n    i.current && (u.current = ((l = (o = e.composedPath) == null ? void 0 : o.call(e)) == null ? void 0 : l[0]) || e.target);\n  }, !0), a(\"click\", e => {\n    u.current && (f(e, () => u.current), u.current = null);\n  }, !0), a(\"blur\", e => f(e, () => window.document.activeElement instanceof HTMLIFrameElement ? window.document.activeElement : null), !0);\n}\nexport { L as useOutsideClick };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}